
//
// Cassetto icons.
//
// SVG first with PNG sprite fallback
// or PNG first with hidpi 2x sprite support.
//

// work in progress... Needs documentation.



// Config
$sprite-spacing: 20px !default;
$mq-hidpi: "(min-resolution: 1.5dppx), (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (min-resolution: 144dpi)";

// A bit of terminology...
// sprite = a single image/icon
// "sprite sheet" or "sprite map" = the final combined image

$sprite-maps-name: ();
$sprite-maps-1x:   ();
$sprite-maps-2x:   ();



//
//
//
@mixin cst-sprite-map-create($name) {
  $map-1x: sprite-map("icons/#{$name}/png/*.png", $spacing: $sprite-spacing);
  $map-2x: sprite-map("icons/#{$name}/png_2x/*.png", $spacing: $sprite-spacing);

  $sprite-maps-name: append($sprite-maps-name, $name);
  $sprite-maps-1x: append($sprite-maps-1x, $map-1x);
  $sprite-maps-2x: append($sprite-maps-2x, $map-2x);

  %sprite-map-#{$name}-image-map {
    background: {
      image: $map-1x;
      repeat: no-repeat;
    }
  }
  %sprite-map-#{$name}-2x-image-map {
    @media #{$mq-hidpi} {
      background: {
        image: $map-2x;
        size: ceil(image-width(sprite-path($map-2x)) / 2) auto;
        // repeat: no-repeat;
      }
    }
  }
}



//
//
//
@function _cst-sprite-map-get($name, $factor: "1x") {
  $ret: ();
  $index: index($sprite-maps-name, $name);

  @if ($factor == "1x") {
    $ret: nth($sprite-maps-1x, $index);
  }
  @else if ($factor == "2x") {
    $ret: nth($sprite-maps-2x, $index);
  }

  @return $ret;
}



//
//
//
@function _cst-sprite-position($map, $sprite, $offset-x: 0, $offset-y: 0, $multiplier: 1) {
  $pos: sprite-position($map, $sprite, $offset-x * $multiplier, $offset-y * $multiplier);
  @return (nth($pos, 1) nth($pos, 2) / $multiplier);
}



//
//
//
@mixin cst-icon($name, $sprite, $offset: 0 0, $type: "svg") {

  $map-1x: _cst-sprite-map-get($name, "1x");
  $map-2x: _cst-sprite-map-get($name, "2x");

  // Shorter mixin calls.
  $offset-x: nth($offset, 1);
  $offset-y: nth($offset, 2);

  @if ($type == "svg") {

    $svg-file: "icons/#{$name}/#{$sprite}.svg";

    background: {
      image: inline-image($svg-file);
      repeat: no-repeat;
    }

    .svg & {
      @content;
    }

    .no-svg &,
    .no-js & {

      @extend %sprite-map-#{$name}-image-map;

      background: {
        //image: $map-1x;
        position: _cst-sprite-position($map-1x, $sprite, $offset-x, $offset-y);
        //repeat: no-repeat;
      }
    }

  }
  @else if ($type == "png") {

    @extend %sprite-map-#{$name}-image-map;

    background-position: _cst-sprite-position($map-1x, $sprite, $offset-x, $offset-y);

    @extend %sprite-map-#{$name}-2x-image-map;

    @media #{$mq-hidpi} {
      background-position: _cst-sprite-position($map-2x, $sprite, $offset-x, $offset-y, 2);
    }

  }

}



//
//
//
@mixin cst-icon-single($name, $sprite, $type: "svg") {

  // $map-1x: _cst-sprite-map-get($name, "1x");
  // $map-2x: _cst-sprite-map-get($name, "2x");

  $svg-file: "icons/#{$name}/#{$sprite}.svg";
  $png-file-1x: "icons/#{$name}/png/#{$sprite}.png";
  $png-file-2x: "icons/#{$name}/png_2x/#{$sprite}.png";
  // sprite-file() and inline-image() no work.
  // @see https://github.com/chriseppstein/compass/issues/951
  // $png-file-1x: sprite-file($map-1x, $sprite);
  // $png-file-2x: sprite-file($map-2x, $sprite);

  @if ($type == "svg") {

    background: {
      image: inline-image($svg-file);
      repeat: no-repeat;
    }

    .svg & {
      @content;
    }

    .no-svg &,
    .no-js & {
      background-image: inline-image($png-file-1x);
    }

  }
  @else if ($type == "png") {

    background: {
      image: inline-image($png-file-1x);
      repeat: no-repeat;
    }

    @media #{$mq-hidpi} {
      background-image: inline-image($png-file-2x);
    }
  }
}



//
//
//
@mixin cst-icon-generated($name, $sprite, $offset: 0 0, $type: "svg", $centered: false) {
  position: relative;
  &:before {
    $map-1x: _cst-sprite-map-get($name, "1x");

    $width: image-width(sprite-file($map-1x, $sprite));
    $height: image-height(sprite-file($map-1x, $sprite));

    @include generated($width, $height);

    @if ($centered) {
      @include calc(top, "(50% - #{$height}  /2)", 40%);
      @include calc(left, "(50% - #{$width}  /2)", 40%);
    }

    @include cst-icon($name, $sprite, $offset, $type);

    @content;
  }
}


