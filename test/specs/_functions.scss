

@include describe("The strip-unit function") {
  @include it("should always return a number") {
    @include should(expect(strip-unit(1px)), to(have-type-of("number")));
    @include should(expect(strip-unit(100%)), to(have-type-of("number")));
  }
}



@include describe("The template function") {
  $input: '<svg xmlns="http://www.w3.org/2000/svg" width="{{width}}" height="{{height}}"></svg>';
  $output: '<svg xmlns="http://www.w3.org/2000/svg" width="10" height="10"></svg>';

  @include it("should always return a string") {
    @include should(expect(template($input, $width: 10, $height: 10)), to(have-type-of("string")));
  }

  @include it("should return a capitalized string") {
    @include should(expect(template($input, $width: 10, $height: 10)), to(be($output)));
  }
}



@include describe("The empty function") {
  $true: false, null, "", 0, ();
  $false: true, "str", 1, (1,), (1: 1);

  @include it("should always return a boolean") {
    @include should(expect(empty(0)), to(have-type-of("bool")));
    @include should(expect(empty(1)), to(have-type-of("bool")));
  }

  @include it("should test for empty values") {
    @each $test in $true {
      @include should(expect(empty($test)), to(be-truthy()));
    }
    @each $test in $false {
      @include should(expect(empty($test)), to(be-falsy()));
    }
  }
}



@include describe("The strict-eq function") {
  $true: strict-eq(10px, 10px);
  $false: strict-eq(10px, 10%);

  @include it("should always return a boolean") {
    @include should(expect($true), to(have-type-of("bool")));
    @include should(expect($false), to(have-type-of("bool")));
  }

  @include it("should test for strictly equal values") {
    @include should(expect($true), to(be-truthy()));
    @include should(expect($false), to(be-falsy()));
  }
}



@include describe("The is-in-range function") {
  $true: is-in-range(0, 10, 5);
  $false: is-in-range(0, 10, -2);

  @include it("should always return a boolean") {
    @include should(expect($true), to(have-type-of("bool")));
    @include should(expect($false), to(have-type-of("bool")));
  }

  @include it("should test for range") {
    @include should(expect($true), to(be-truthy()));
    @include should(expect($false), to(be-falsy()));
  }
}



@include describe("The clamp function") {
  $under: clamp(0, 10, -2);
  $between: clamp(0, 10, 5);
  $over: clamp(0, 10, 12);

  @include it("should always return a number") {
    @include should(expect($under), to(have-type-of("number")));
    @include should(expect($between), to(have-type-of("number")));
    @include should(expect($over), to(have-type-of("number")));
  }

  @include it("should return a clamped number") {
    @include should(expect($under), to(be(0)));
    @include should(expect($between), to(be(5)));
    @include should(expect($over), to(be(10)));
  }
}



@include describe("The is-file function") {
  $true: is-file("test.svg");
  $false: is-file("img/svg");

  @include it("should always return a boolean") {
    @include should(expect($true), to(have-type-of("bool")));
    @include should(expect($false), to(have-type-of("bool")));
  }

  @include it("should test for a file name") {
    @include should(expect($true), to(be-truthy()));
    @include should(expect($false), to(be-falsy()));
  }
}
