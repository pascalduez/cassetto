

@include describe("The _map-set function") {
  $input: (one: 1, two: 2);
  $output: (one: 1, two: 2, three: 3);

  @include it("should always return a map") {
    @include should(expect(_map-set($input, three, 3)), to(have-type-of("map")));
  }

  @include it("should append the new entry") {
    @include should(expect(_map-set($input, three, 3)), to(be($output)));
  }
}



@include describe("The _map-keys function") {
  $input: (one: 1px, two: 2px);
  $output: (one two);

  $test: _map-keys($input);

  @include it("should always return a list") {
    @include should(expect($test), to(have-type-of("list")));
  }

  @include it("should return a list of keys") {
    @include should(expect($test), to(be($output)));
  }

  @include it("should return a list with specified separator") {
    @include should(expect(list-separator($test)), to(be(space)));
  }
}



@include describe("The _map-values function") {
  $input: (one: 1px, two: 2px);
  $output: (1px 2px);

  $test: _map-values($input);

  @include it("should always return a list") {
    @include should(expect($test), to(have-type-of("list")));
  }

  @include it("should return a list of values") {
    @include should(expect($test), to(be($output)));
  }

  @include it("should return a list with specified separator") {
    @include should(expect(list-separator($test)), to(be(space)));
  }
}



@include describe("The map-fetch function") {
  $map: (
    one: (
      two: (
        three: "yeah!"
      )
    )
  );
  $test: map-fetch($map, one two three);

  @include it("should return a deep nested value") {
    @include should(expect($test), to(be("yeah!")));
  }
}



@include describe("The map-deep-merge function") {
  $map: (
    one: (
      val: 1,
      two: (
        val: 2,
        three: (
          val: 3,
          four: (
            val: 4
          )
        )
      )
    ),
    foo: "foo",
    bar: "bar"
  );
   // It should append a new value
  $append: map-deep-merge($map, one two three four, (test: "flag!"));
  $append-val: map-fetch($append, one two three four test);
  // It should update a defined value
  $update: map-deep-merge($map, one two three four, (val: "flag!"));
  $update-val: map-fetch($update, one two three four val);

  @include it("should always return a map") {
    @include should(expect($append), to(have-type-of("map")));
  }

  @include it("should append a new value") {
    @include should(expect($append-val), to(be("flag!")));
  }

  @include it("should update a defined value") {
    @include should(expect($update-val), to(be("flag!")));
  }
}



@include describe("The map-search function") {
  $map: (
    one: 1,
    two: 2,
    three: 3
  );
  $test: map-search($map, 2);

  @include it("should return the key associated with value") {
    @include should(expect($test), to(be("two")));
  }
}
