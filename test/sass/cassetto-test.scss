
//
// Import cassetto
//
@import "cassetto";

/*
 * Test arrowtail.
 */
.test-arrowtail {
  .top {
    @include arrowtail("top", rgba(0, 0 ,0, .5), $diagonal: 30px);
  }
  .right {
    @include arrowtail("right", rgba(0, 0 ,0, .5), $diagonal: 30px);
  }
  .bottom {
    @include arrowtail("bottom", rgba(0, 0 ,0, .5), $diagonal: 30px);
  }
  .left {
    @include arrowtail("left", rgba(0, 0 ,0, .5), $diagonal: 30px);
  }
}

/*
 * Test bevel.
 */
.test-bevel {
  .top {
    box-shadow: bevel("top", rgba(0, 0, 0, .5), rgba(255, 255, 255, .5));
  }
  .right {
    box-shadow: bevel("right", rgba(0, 0, 0, .5), rgba(255, 255, 255, .5));
  }
  .bottom {
    box-shadow: bevel("bottom", rgba(0, 0, 0, .5), rgba(255, 255, 255, .5));
  }
  .left {
    box-shadow: bevel("left", rgba(0, 0, 0, .5), rgba(255, 255, 255, .5));
  }
}

/*
 * Test leading.
 */
.test-leading {
  @include leading(1.6, 1.5);
}

/*
 * Test truncate.
 */
.test-truncate {
  .ellipsis {
    @include truncate;
  }
  .clip {
    @include truncate(clip);
  }
  .string {
    @include truncate("...");
  }
  .two-values {
    @include truncate(clip ellipsis);
  }
}

/*
 * Test whitespace.
 */
.test-whitespace {
  @include reset-whitespace("a");
}

/*
 * Test centered items.
 */
.test-centered-items {
  @include centered-items("li");
}

/*
 * Test hyphenate.
 */
.test-hyphenate {
  @include hyphenate;
}

/*
 * Test ligatures.
 */
.test-ligatures {
  @include ligatures;
}

/*
 * Test kerning.
 */
.test-kerning {
  @include kerning;
}

/*
 * Test oldstyle-numbers.
 */
.test-oldstyle-numbers {
  @include oldstyle-numbers;
}

/*
 * Test typography.
 */
.test-typography {
  h1, h2, h3, h4, h5, h6 {
    @include typography-heading;
  }
  p {
    @include typography-paragraph;
  }
}

/*
 * Test font smoothing.
 */
.test-font-smoothing {
  .on {
    @include font-smoothing;
  }
  .off {
    @include font-smoothing(off);
  }
}

/*
 * Test calc.
 */
.test-calc {
  @include calc(width, "100% - 50px", 100px);
}

/*
 * Test accelerate.
 */
.test-accelerate {
  @include accelerate;
}

/*
 * Test will-change.
 */
.test-will-change {
  .should-pass {
    @include will-change(transform);
  }
  .should-warn {
    @include will-change(height);
  }
}

/*
 * Test generated.
 */
.test-generated {
  &:before {
    @include generated(50px, 50px);
  }
  &:after {
    @include generated(20px, 20px, $top: 0, $left: 0);
  }
}

/*
 * Test icons.
 */
.test-icons {

  @include cst-sprite-map-create(social);

  $social: ("facebook", "twitter", "googleplus", "xing", "linkedin");

  @each $icon in $social {

    .icon-svg-#{$icon} {
      @include cst-icon(social, $icon);
    }

    .icon-png-#{$icon} {
      @include cst-icon(social, $icon, $type: "png");
    }

    .icon-single-#{$icon} {
      @include cst-icon-single(social, $icon);
    }

    .icon-generated-#{$icon} {
      @include cst-icon-generated(social, $icon);
    }

  }

}
